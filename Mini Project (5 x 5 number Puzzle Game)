#!/bin/bash

# Define the goal state
goal_state=(" 1" " 2" " 3" " 4" " 5" " 6" " 7" " 8" " 9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "  ")

# Initialize the board
board=(" 1" " 2" " 3" " 4" " 5" " 6" " 7" " 8" " 9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "  ")

# Function to shuffle the board
#`init()`
shuffle_board() {
    for ((i = 0; i < 1000; i++)); do
        moves=("U" "D" "L" "R")
        random_move=${moves[$((RANDOM % 4))]}
        make_move "$random_move"
    done
}

# Function to print the current state
print_state() {
    printf "     Current State\t\t     Goal State\n"
    for ((i = 0; i < 5; i++)); do
        for ((j = 0; j < 5; j++)); do
            idx=$((i * 5 + j))
            printf "${board[idx]} | "
        done

        printf "\t"

        for ((j = 0; j < 5; j++)); do
            idx=$((i * 5 + j))
            printf "${goal_state[idx]} | "
        done
        printf "\n"
    done
}

# Function to find the position of the blank square
find_blank() {
    for ((i = 0; i < 25; i++)); do
        if [ "${board[i]}" == "  " ]; then
            blank_position=$i
            break
        fi
    done
}

# Function to check if the goal state is reached
is_goal() {
    [ "${board[*]}" == "${goal_state[*]}" ]
}

# Function to get legal moves for the current state
legal_moves() {
    local legal_moves=()

    if ((blank_position / 5 > 0)); then
        legal_moves+=('U')  # Up
    fi
    if ((blank_position / 5 < 4)); then
        legal_moves+=('D')  # Down
    fi
    if ((blank_position % 5 > 0)); then
        legal_moves+=('L')  # Left
    fi
    if ((blank_position % 5 < 4)); then
        legal_moves+=('R')  # Right
    fi

    echo "${legal_moves[@]}"
}

# Function to make a move (swap blank tile with adjacent tile)
make_move() {
    local move="$1"

    case "$move" in
    "U")  # Up
        if ((blank_position / 5 > 0)); then
            local new_position=$((blank_position - 5))
            board[blank_position]="${board[new_position]}"
            board[new_position]="  "
            blank_position=$new_position
        fi
        ;;
    "D")  # Down
        if ((blank_position / 5 < 4)); then
            local new_position=$((blank_position + 5))
            board[blank_position]="${board[new_position]}"
            board[new_position]="  "
            blank_position=$new_position
        fi
        ;;
    "L")  # Left
        if ((blank_position % 5 > 0)); then
            local new_position=$((blank_position - 1))
            board[blank_position]="${board[new_position]}"
            board[new_position]="  "
            blank_position=$new_position
        fi
        ;;
    "R")  # Right
        if ((blank_position % 5 < 4)); then
            local new_position=$((blank_position + 1))
            board[blank_position]="${board[new_position]}"
            board[new_position]="  "
            blank_position=$new_position
        fi
        ;;
    esac
}

# Function to print the sequence of moves taken
print_path() {
    echo "Sequence of Moves: $path"
}

# Main script
find_blank
shuffle_board
print_state
sleep 2

# User input for moves
while true; do
    echo "Enter a move (U/D/L/R) or Q to quit: "
    read -n 1 move
    echo

    if [ "$move" == "Q" ] || [ "$move" == "q" ]; then
        break
    fi

    if [[ "$move" == "U" || "$move" == "D" || "$move" == "L" || "$move" == "R" ]]; then
        make_move "$move"
        print_state
    else
        echo "Invalid move. Use U/D/L/R or Q to quit."
    fi

    if is_goal; then
        echo "Congratulations! You solved the puzzle."
        break
    fi
done

